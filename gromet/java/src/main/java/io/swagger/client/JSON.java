/*
 * Grounded Model Exchange (GroMEt) schema for Function Networks
 * This document defines the GroMEt Function Network data model. Note that Metadata is defined in separate spec.  __Using Swagger to Generate Class Structure__  To automatically generate Python or Java models corresponding to this document, you can use [swagger-codegen](https://swagger.io/tools/swagger-codegen/). This can be used to generate the client code based off of this spec, and in the process this will generate the data model class structure.  1. Install via the method described for your operating system    [here](https://github.com/swagger-api/swagger-codegen#Prerequisites).    Make sure to install a version after 3.0 that will support openapi 3. 2. Run swagger-codegen with the options in the example below.    The URL references where the yaml for this documentation is stored on    github. Make sure to replace CURRENT_VERSION with the correct version.    (The current version is `0.1.4`.)    To generate Java classes rather, change the `-l python` to `-l java`.    Change the value to the `-o` option to the desired output location.    ```    swagger-codegen generate -l python -o ./client -i https://raw.githubusercontent.com/ml4ai/automates-v2/master/docs/source/gromet_FN_v{CURRENT_VERSION}.yaml    ``` 3. Once it executes, the client code will be generated at your specified    location.    For python, the classes will be located in    `$OUTPUT_PATH/swagger_client/models/`.    For java, they will be located in    `$OUTPUT_PATH/src/main/java/io/swagger/client/model/`  If generating GroMEt schema data model classes in SKEMA (AutoMATES), then afer generating the above, follow the instructions here: ``` <automates>/automates/model_assembly/gromet/model/README.md ``` 
 *
 * OpenAPI spec version: 0.1.4
 * Contact: claytonm@arizona.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.swagger.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(GrometObject.class, new TypeSelector<GrometObject>() {
            @Override
            public Class<? extends GrometObject> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends GrometObject>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("GrometBox".toUpperCase(), GrometBox.class);
                    classByDiscriminatorValue.put("GrometFN".toUpperCase(), GrometFN.class);
                    classByDiscriminatorValue.put("GrometFNModule".toUpperCase(), GrometFNModule.class);
                    classByDiscriminatorValue.put("GrometPort".toUpperCase(), GrometPort.class);
                    classByDiscriminatorValue.put("GrometWire".toUpperCase(), GrometWire.class);
                    classByDiscriminatorValue.put("GrometObject".toUpperCase(), GrometObject.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, "gromet_object_type"));
            }
          })
          .registerPostProcessor(GrometObject.class, new PostProcessor<GrometObject>() {
              @Override
              public void postDeserialize(GrometObject result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, GrometObject src, Gson gson) {
                  Map<Class<? extends GrometObject>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(GrometBox.class, "GrometBox");
                      discriminatorValueByClass.put(GrometFN.class, "GrometFN");
                      discriminatorValueByClass.put(GrometFNModule.class, "GrometFNModule");
                      discriminatorValueByClass.put(GrometPort.class, "GrometPort");
                      discriminatorValueByClass.put(GrometWire.class, "GrometWire");
                      discriminatorValueByClass.put(GrometObject.class, "GrometObject");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has("gromet_object_type"))
                      {
                          ((JsonObject) result).addProperty("gromet_object_type", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(GrometBox.class, new TypeSelector<GrometBox>() {
            @Override
            public Class<? extends GrometBox> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends GrometBox>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("GrometBoxConditional".toUpperCase(), GrometBoxConditional.class);
                    classByDiscriminatorValue.put("GrometBoxFunction".toUpperCase(), GrometBoxFunction.class);
                    classByDiscriminatorValue.put("GrometBoxLoop".toUpperCase(), GrometBoxLoop.class);
                    classByDiscriminatorValue.put("GrometBox".toUpperCase(), GrometBox.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(GrometBox.class, new PostProcessor<GrometBox>() {
              @Override
              public void postDeserialize(GrometBox result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, GrometBox src, Gson gson) {
                  Map<Class<? extends GrometBox>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(GrometBoxConditional.class, "GrometBoxConditional");
                      discriminatorValueByClass.put(GrometBoxFunction.class, "GrometBoxFunction");
                      discriminatorValueByClass.put(GrometBoxLoop.class, "GrometBoxLoop");
                      discriminatorValueByClass.put(GrometBox.class, "GrometBox");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Metadata.class, new TypeSelector<Metadata>() {
            @Override
            public Class<? extends Metadata> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Metadata>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("EquationDefinition".toUpperCase(), EquationDefinition.class);
                    classByDiscriminatorValue.put("EquationParameter".toUpperCase(), EquationParameter.class);
                    classByDiscriminatorValue.put("GrometCreation".toUpperCase(), GrometCreation.class);
                    classByDiscriminatorValue.put("SourceCodeCollection".toUpperCase(), SourceCodeCollection.class);
                    classByDiscriminatorValue.put("SourceCodeDataType".toUpperCase(), SourceCodeDataType.class);
                    classByDiscriminatorValue.put("SourceCodeLoopInit".toUpperCase(), SourceCodeLoopInit.class);
                    classByDiscriminatorValue.put("SourceCodeLoopUpdate".toUpperCase(), SourceCodeLoopUpdate.class);
                    classByDiscriminatorValue.put("SourceCodeReference".toUpperCase(), SourceCodeReference.class);
                    classByDiscriminatorValue.put("TextDefinition".toUpperCase(), TextDefinition.class);
                    classByDiscriminatorValue.put("TextParameter".toUpperCase(), TextParameter.class);
                    classByDiscriminatorValue.put("TextualDocumentCollection".toUpperCase(), TextualDocumentCollection.class);
                    classByDiscriminatorValue.put("Metadata".toUpperCase(), Metadata.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(Metadata.class, new PostProcessor<Metadata>() {
              @Override
              public void postDeserialize(Metadata result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Metadata src, Gson gson) {
                  Map<Class<? extends Metadata>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(EquationDefinition.class, "EquationDefinition");
                      discriminatorValueByClass.put(EquationParameter.class, "EquationParameter");
                      discriminatorValueByClass.put(GrometCreation.class, "GrometCreation");
                      discriminatorValueByClass.put(SourceCodeCollection.class, "SourceCodeCollection");
                      discriminatorValueByClass.put(SourceCodeDataType.class, "SourceCodeDataType");
                      discriminatorValueByClass.put(SourceCodeLoopInit.class, "SourceCodeLoopInit");
                      discriminatorValueByClass.put(SourceCodeLoopUpdate.class, "SourceCodeLoopUpdate");
                      discriminatorValueByClass.put(SourceCodeReference.class, "SourceCodeReference");
                      discriminatorValueByClass.put(TextDefinition.class, "TextDefinition");
                      discriminatorValueByClass.put(TextParameter.class, "TextParameter");
                      discriminatorValueByClass.put(TextualDocumentCollection.class, "TextualDocumentCollection");
                      discriminatorValueByClass.put(Metadata.class, "Metadata");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
