/*
 * Grounded Model Exchange (GroMEt) schema for Function Networks
 * This document defines the GroMEt Function Network data model. Note that Metadata is defined in separate spec.  __Using Swagger to Generate Class Structure__  To automatically generate Python or Java models corresponding to this document, you can use [swagger-codegen](https://swagger.io/tools/swagger-codegen/). This can be used to generate the client code based off of this spec, and in the process this will generate the data model class structure.  1. Install via the method described for your operating system    [here](https://github.com/swagger-api/swagger-codegen#Prerequisites).    Make sure to install a version after 3.0 that will support openapi 3. 2. Run swagger-codegen with the options in the example below.    The URL references where the yaml for this documentation is stored on    github. Make sure to replace CURRENT_VERSION with the correct version.    (The current version is `0.1.4`.)    To generate Java classes rather, change the `-l python` to `-l java`.    Change the value to the `-o` option to the desired output location.    ```    swagger-codegen generate -l python -o ./client -i https://raw.githubusercontent.com/ml4ai/automates-v2/master/docs/source/gromet_FN_v{CURRENT_VERSION}.yaml    ``` 3. Once it executes, the client code will be generated at your specified    location.    For python, the classes will be located in    `$OUTPUT_PATH/swagger_client/models/`.    For java, they will be located in    `$OUTPUT_PATH/src/main/java/io/swagger/client/model/`  If generating GroMEt schema data model classes in SKEMA (AutoMATES), then afer generating the above, follow the instructions here: ``` <automates>/automates/model_assembly/gromet/model/README.md ``` 
 *
 * OpenAPI spec version: 0.1.4
 * Contact: claytonm@arizona.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.GrometBox;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * FN Box Conditional. __Conditional execution semantics__: The Boolean output Port of the Conditional condition represents whether execution will proceed with the body_if (True) or the body_else (False). If there is no body_else and the condition is False, then the values at the Outer Port Input Ports are copied to the Outer Port Output Ports and execution moves past the Conditional. 
 */
@Schema(description = "FN Box Conditional. __Conditional execution semantics__: The Boolean output Port of the Conditional condition represents whether execution will proceed with the body_if (True) or the body_else (False). If there is no body_else and the condition is False, then the values at the Outer Port Input Ports are copied to the Outer Port Output Ports and execution moves past the Conditional. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-02T01:18:52.196-07:00[America/Phoenix]")
public class GrometBoxConditional extends GrometBox {
  @SerializedName("condition")
  private Integer condition = null;

  @SerializedName("body_if")
  private Integer bodyIf = null;

  @SerializedName("body_else")
  private Integer bodyElse = null;

  public GrometBoxConditional condition(Integer condition) {
    this.condition = condition;
    return this;
  }

   /**
   * The index to the entry in the &#x60;bf&#x60; table (array) of *this* GrometFN representing the conditional condition. 
   * @return condition
  **/
  @Schema(description = "The index to the entry in the `bf` table (array) of *this* GrometFN representing the conditional condition. ")
  public Integer getCondition() {
    return condition;
  }

  public void setCondition(Integer condition) {
    this.condition = condition;
  }

  public GrometBoxConditional bodyIf(Integer bodyIf) {
    this.bodyIf = bodyIf;
    return this;
  }

   /**
   * The index to the entry in the &#x60;bf&#x60; table (array) of *this* GrometFN representing the body (Function) of IF-branch of the conditional. 
   * @return bodyIf
  **/
  @Schema(description = "The index to the entry in the `bf` table (array) of *this* GrometFN representing the body (Function) of IF-branch of the conditional. ")
  public Integer getBodyIf() {
    return bodyIf;
  }

  public void setBodyIf(Integer bodyIf) {
    this.bodyIf = bodyIf;
  }

  public GrometBoxConditional bodyElse(Integer bodyElse) {
    this.bodyElse = bodyElse;
    return this;
  }

   /**
   * The index to the entry in the &#x60;bf&#x60; table (array) of *this* GrometFN representing the body (Function) of ELSE-branch of the conditional. 
   * @return bodyElse
  **/
  @Schema(description = "The index to the entry in the `bf` table (array) of *this* GrometFN representing the body (Function) of ELSE-branch of the conditional. ")
  public Integer getBodyElse() {
    return bodyElse;
  }

  public void setBodyElse(Integer bodyElse) {
    this.bodyElse = bodyElse;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrometBoxConditional grometBoxConditional = (GrometBoxConditional) o;
    return Objects.equals(this.condition, grometBoxConditional.condition) &&
        Objects.equals(this.bodyIf, grometBoxConditional.bodyIf) &&
        Objects.equals(this.bodyElse, grometBoxConditional.bodyElse) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, bodyIf, bodyElse, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrometBoxConditional {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    bodyIf: ").append(toIndentedString(bodyIf)).append("\n");
    sb.append("    bodyElse: ").append(toIndentedString(bodyElse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
