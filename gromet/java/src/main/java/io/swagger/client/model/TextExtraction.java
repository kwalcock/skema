/*
 * GroMEt Metadata spec
 * Grounded Model Exchange (GroMEt) Metadata schema specification  __Using Swagger to Generate Class Structure__  To automatically generate Python or Java models corresponding to this document, you can use [swagger-codegen](https://swagger.io/tools/swagger-codegen/). We can use this to generate client code based off of this spec that will also generate the class structure.  1. Install via the method described for your operating system    [here](https://github.com/swagger-api/swagger-codegen#Prerequisites).    Make sure to install a version after 3.0 that will support openapi 3. 2. Run swagger-codegen with the options in the example below.    The URL references where the yaml for this documentation is stored on    github. Make sure to replace CURRENT_VERSION with the correct version.    (The current version is `0.1.4`.)    To generate Java classes rather, change the `-l python` to `-l java`.    Change the value to the `-o` option to the desired output location.    ```    swagger-codegen generate -l python -o ./client -i https://raw.githubusercontent.com/ml4ai/automates-v2/master/docs/source/gromet_metadata_v{CURRENT_VERSION}.yaml    ``` 3. Once it executes, the client code will be generated at your specified    location.    For python, the classes will be located in    `$OUTPUT_PATH/swagger_client/models/`.    For java, they will be located in    `$OUTPUT_PATH/src/main/java/io/swagger/client/model/`  If generating GroMEt Metadata schema data model classes in SKEMA (AutoMATES), then afer generating the above, follow the instructions here: ``` <automates>/automates/model_assembly/gromet/metadata/README.md ``` 
 *
 * OpenAPI spec version: 0.1.4
 * Contact: claytonm@email.arizona.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Representation of Text Extraction. Assumes COSMOS within-document reference coordinates to a span of text. 
 */
@Schema(description = "Representation of Text Extraction. Assumes COSMOS within-document reference coordinates to a span of text. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-10-09T12:36:06.656-07:00[America/Phoenix]")
public class TextExtraction {
  @SerializedName("document_reference_uid")
  private String documentReferenceUid = null;

  @SerializedName("page")
  private Integer page = null;

  @SerializedName("block")
  private Integer block = null;

  @SerializedName("char_begin")
  private Integer charBegin = null;

  @SerializedName("char_end")
  private Integer charEnd = null;

  public TextExtraction documentReferenceUid(String documentReferenceUid) {
    this.documentReferenceUid = documentReferenceUid;
    return this;
  }

   /**
   * uid of \\&lt;document_reference&gt;
   * @return documentReferenceUid
  **/
  @Schema(description = "uid of \\<document_reference>")
  public String getDocumentReferenceUid() {
    return documentReferenceUid;
  }

  public void setDocumentReferenceUid(String documentReferenceUid) {
    this.documentReferenceUid = documentReferenceUid;
  }

  public TextExtraction page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * The COSMOS-assigned page number
   * @return page
  **/
  @Schema(description = "The COSMOS-assigned page number")
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }

  public TextExtraction block(Integer block) {
    this.block = block;
    return this;
  }

   /**
   * The COSMOS-extracted text block from the page
   * @return block
  **/
  @Schema(description = "The COSMOS-extracted text block from the page")
  public Integer getBlock() {
    return block;
  }

  public void setBlock(Integer block) {
    this.block = block;
  }

  public TextExtraction charBegin(Integer charBegin) {
    this.charBegin = charBegin;
    return this;
  }

   /**
   * Character coordinate within a text block where span begins
   * @return charBegin
  **/
  @Schema(description = "Character coordinate within a text block where span begins")
  public Integer getCharBegin() {
    return charBegin;
  }

  public void setCharBegin(Integer charBegin) {
    this.charBegin = charBegin;
  }

  public TextExtraction charEnd(Integer charEnd) {
    this.charEnd = charEnd;
    return this;
  }

   /**
   * Character coordinate within a text block where span ends
   * @return charEnd
  **/
  @Schema(description = "Character coordinate within a text block where span ends")
  public Integer getCharEnd() {
    return charEnd;
  }

  public void setCharEnd(Integer charEnd) {
    this.charEnd = charEnd;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextExtraction textExtraction = (TextExtraction) o;
    return Objects.equals(this.documentReferenceUid, textExtraction.documentReferenceUid) &&
        Objects.equals(this.page, textExtraction.page) &&
        Objects.equals(this.block, textExtraction.block) &&
        Objects.equals(this.charBegin, textExtraction.charBegin) &&
        Objects.equals(this.charEnd, textExtraction.charEnd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentReferenceUid, page, block, charBegin, charEnd);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextExtraction {\n");
    
    sb.append("    documentReferenceUid: ").append(toIndentedString(documentReferenceUid)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    charBegin: ").append(toIndentedString(charBegin)).append("\n");
    sb.append("    charEnd: ").append(toIndentedString(charEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
