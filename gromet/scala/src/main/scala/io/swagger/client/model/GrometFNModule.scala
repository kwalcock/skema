/**
 * Grounded Model Exchange (GroMEt) schema for Function Networks
 * This document defines the GroMEt Function Network data model. Note that Metadata is defined in separate spec.  __Using Swagger to Generate Class Structure__  To automatically generate Python or Java models corresponding to this document, you can use [swagger-codegen](https://swagger.io/tools/swagger-codegen/). This can be used to generate the client code based off of this spec, and in the process this will generate the data model class structure.  1. Install via the method described for your operating system    [here](https://github.com/swagger-api/swagger-codegen#Prerequisites).    Make sure to install a version after 3.0 that will support openapi 3. 2. Run swagger-codegen with the options in the example below.    The URL references where the yaml for this documentation is stored on    github. Make sure to replace CURRENT_VERSION with the correct version.    (The current version is `0.1.4`.)    To generate Java classes rather, change the `-l python` to `-l java`.    Change the value to the `-o` option to the desired output location.    ```    swagger-codegen generate -l python -o ./client -i https://raw.githubusercontent.com/ml4ai/automates-v2/master/docs/source/gromet_FN_v{CURRENT_VERSION}.yaml    ``` 3. Once it executes, the client code will be generated at your specified    location.    For python, the classes will be located in    `$OUTPUT_PATH/swagger_client/models/`.    For java, they will be located in    `$OUTPUT_PATH/src/main/java/io/swagger/client/model/`  If generating GroMEt schema data model classes in SKEMA (AutoMATES), then afer generating the above, follow the instructions here: ``` <automates>/automates/model_assembly/gromet/model/README.md ``` 
 *
 * OpenAPI spec version: 0.1.4
 * Contact: claytonm@arizona.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.model


/**
 * A GroMEt FN Module. (A Module corresonds to a namespace.) When derived from a source program, the FN is typically decomposed into a hierarchical structure of FNs, with a root GrometFN (that has a Module Outer Box) that will be assigned to the `fn` attribute of the GrometFNModule, and then has an array of `attributes` that are either themselves GrometFNs (the represent the types, functions, and variable-bound values, defined within the module) or imported elements. 
 *
 * @param metadata Index (integer) into the metadata_collection table in GrometFNModule.
 * @param schema 
 * @param schemaVersion 
 * @param name The name of the Function Network Module. 
 * @param fn 
 * @param attributes (sum-type) Array of TypedValues. Currently expect:<br> (1) other GrometFN (type = \"FN\")<br> (2) references to ImportReference (type = \"IMPORT\") 
 * @param metadataCollection Table (array) of lists (arrays) of metadata, where each list in the Table-array represents the collection of metadata associated with a GroMEt object. 
 */
case class GrometFNModule (
  metadata: Option[Integer] = None,
  schema: Option[String] = None,
  schemaVersion: Option[String] = None,
  name: Option[String] = None,
  fn: Option[GrometFN] = None,
  attributes: Option[List[TypedValue]] = None,
  metadataCollection: Option[List[List[Metadata]]] = None
)

